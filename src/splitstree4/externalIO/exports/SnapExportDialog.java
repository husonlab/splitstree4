/**
 * SnapExportDialog.java
 * Copyright (C) 2015 Daniel H. Huson and David J. Bryant
 * <p/>
 * (Some files contain contributions from other authors, who are then mentioned separately.)
 * <p/>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * SnapExportDialog.java
 *
 * Gui asking for extra options when exporting for SNAP */


//package exportDialogs; //use this for netbeans
package splitstree4.externalIO.exports;

import jloda.util.Basic;
import splitstree4.core.Document;
import splitstree4.nexus.Distances;

/**
 *
 * @author dbry009
 */
public class SnapExportDialog extends javax.swing.JDialog {

    /** Creates new form SnapExportDialog */
    public SnapExportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // params = Snap.estimatePriorParams(this.doc,(String)popTrait.getSelectedItem(),this.hamming);
        // updateMutation();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        //jCheckBox1 = new javax.swing.JCheckBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        treeCheckBox = new javax.swing.JCheckBox();
        timesCheckBox = new javax.swing.JCheckBox();
        populationCheckBox = new javax.swing.JCheckBox();
        mutationCheckBox = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        mcmcLengthField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        mcmcBurninField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        mcmcSampleField = new javax.swing.JTextField();
        exportButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        varLabel = new javax.swing.JLabel();
        varField = new javax.swing.JTextField();
        meanLabel = new javax.swing.JLabel();
        meanField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        popTrait = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        startTreeCombo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        startThetasCombo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        treeTextPane = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        speciesTreeCombo = new javax.swing.JComboBox();
        treePriorParamField = new javax.swing.JTextField();
        treeParamLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pi0LabelLabel = new javax.swing.JLabel();
        uField = new javax.swing.JTextField();
        uLabel = new javax.swing.JLabel();
        vField = new javax.swing.JTextField();
        vLabel = new javax.swing.JLabel();
        pi1LabelLabe = new javax.swing.JLabel();
        rateLabelLabel = new javax.swing.JLabel();
        pi0Label = new javax.swing.JLabel();
        pi1Label = new javax.swing.JLabel();
        rateLabel = new javax.swing.JLabel();
        allPolymorphicCheck = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        estimatePriorCheck = new javax.swing.JCheckBox();

        //jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 581));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters to sample"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        treeCheckBox.setSelected(true);
        treeCheckBox.setText("Trees");
        treeCheckBox.setToolTipText("Sample trees, if unchecked these are left constant. If checked, divergence times and pop. sizes will also be sampled");
        treeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                treeCheckBoxItemStateChanged(evt);
            }
        });
        treeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeCheckBoxActionPerformed(evt);
            }
        });
        treeCheckBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                treeCheckBoxPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(treeCheckBox, gridBagConstraints);

        timesCheckBox.setSelected(true);
        timesCheckBox.setText("Divergence times");
        timesCheckBox.setToolTipText("Sample divergence times, if unchecked these are left constant");
        timesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(timesCheckBox, gridBagConstraints);

        populationCheckBox.setSelected(true);
        populationCheckBox.setText("Population sizes");
        populationCheckBox.setToolTipText("Sample population sizes, if unchecked these are left constant");
        populationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populationCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(populationCheckBox, gridBagConstraints);

        mutationCheckBox.setText("Mutation rates");
        mutationCheckBox.setToolTipText("Sample mutation rates, if unchecked these are left constant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(mutationCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.ipady = -10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Chain"));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel11.setText("Chain length:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel8.add(jLabel11, gridBagConstraints);

        mcmcLengthField.setText("10000000");
        mcmcLengthField.setToolTipText("Number of MCMC iterations");
        mcmcLengthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcmcLengthFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel8.add(mcmcLengthField, gridBagConstraints);

        jLabel12.setText("Burn-in:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel8.add(jLabel12, gridBagConstraints);

        mcmcBurninField.setText("1000000");
        mcmcBurninField.setToolTipText("Initial iterations discarded");
        mcmcBurninField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcmcBurninFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel8.add(mcmcBurninField, gridBagConstraints);

        jLabel13.setText("Sample frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel8.add(jLabel13, gridBagConstraints);

        mcmcSampleField.setText("1000");
        mcmcSampleField.setToolTipText("Frequency at which samples are saved to disk");
        mcmcSampleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcmcSampleFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel8.add(mcmcSampleField, gridBagConstraints);

        exportButton.setText("Export...");
        exportButton.setToolTipText("Export SNAP file");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel8.add(exportButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Cancel export");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel8, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Prior for population sizes"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Pop. size. distribution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel5.add(jLabel3, gridBagConstraints);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Gamma"}));
        jComboBox2.setToolTipText("Prior distribution for theta values");
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel5.add(jComboBox2, gridBagConstraints);

        varLabel.setText("Variance:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel5.add(varLabel, gridBagConstraints);

        varField.setText("1");
        varField.setToolTipText("variance of pop. size prior distribution");
        varField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel5.add(varField, gridBagConstraints);

        meanLabel.setText("Mean:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel5.add(meanLabel, gridBagConstraints);

        meanField.setText("1");
        meanField.setToolTipText("Mean of pop. size prior distribution");
        meanField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel5.add(meanField, gridBagConstraints);

        jLabel16.setText("Species/Pop. trait");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel5.add(jLabel16, gridBagConstraints);

        popTrait.setToolTipText("Which trait in the Traits block determines population or species membership");
        popTrait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popTraitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel5.add(popTrait, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel5, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Initial values"));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        startTreeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Paste tree:", "UPGMA tree (Nei's genetic distance)", "Random tree from prior"}));
        startTreeCombo.setSelectedIndex(2);
        startTreeCombo.setToolTipText("Tree to start the chain");
        startTreeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startTreeComboItemStateChanged(evt);
            }
        });
        startTreeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTreeComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel7.add(startTreeCombo, gridBagConstraints);

        jLabel9.setText("Starting tree");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel7.add(jLabel9, gridBagConstraints);

        jLabel10.setText("Starting thetas");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel7.add(jLabel10, gridBagConstraints);

        startThetasCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Read from tree", "Draw from prior"}));
        startThetasCombo.setSelectedIndex(1);
        startThetasCombo.setToolTipText("Theta values to start the chain");
        startThetasCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startThetasComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel7.add(startThetasCombo, gridBagConstraints);

        treeTextPane.setToolTipText("Paste the starting tree here");
        treeTextPane.setEnabled(false);
        jScrollPane2.setViewportView(treeTextPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel7, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Species tree prior"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        speciesTreeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Yule prior"}));
        speciesTreeCombo.setToolTipText("Prior distribution for species tree");
        speciesTreeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speciesTreeComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(speciesTreeCombo, gridBagConstraints);

        treePriorParamField.setColumns(6);
        treePriorParamField.setText("1.0");
        treePriorParamField.setToolTipText("Birth rate for species tree prior");
        treePriorParamField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treePriorParamFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(treePriorParamField, gridBagConstraints);

        treeParamLabel.setText("Parameter:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel4.add(treeParamLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Mutation rates"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        pi0LabelLabel.setText("pi_0:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel6.add(pi0LabelLabel, gridBagConstraints);

        uField.setColumns(8);
        uField.setText("1");
        uField.setToolTipText("1->0 mutation rate");
        uField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uFieldActionPerformed(evt);
            }
        });
        uField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                uFieldFocusLost(evt);
            }
        });
        uField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                uFieldInputMethodTextChanged(evt);
            }

            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        jPanel6.add(uField, gridBagConstraints);

        uLabel.setText("u:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        jPanel6.add(uLabel, gridBagConstraints);

        vField.setColumns(8);
        vField.setText("1");
        vField.setToolTipText("0->1 mutation rate");
        vField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vFieldActionPerformed(evt);
            }
        });
        vField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                vFieldFocusLost(evt);
            }
        });
        vField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                vFieldInputMethodTextChanged(evt);
            }

            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        jPanel6.add(vField, gridBagConstraints);

        vLabel.setText("v:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        jPanel6.add(vLabel, gridBagConstraints);

        pi1LabelLabe.setText("pi_1:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel6.add(pi1LabelLabe, gridBagConstraints);

        rateLabelLabel.setText("rate:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel6.add(rateLabelLabel, gridBagConstraints);

        pi0Label.setText("0.5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(pi0Label, gridBagConstraints);

        pi1Label.setText("0.5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(pi1Label, gridBagConstraints);

        rateLabel.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(rateLabel, gridBagConstraints);

        allPolymorphicCheck.setSelected(true);
        allPolymorphicCheck.setText("All markers polymorphic");
        allPolymorphicCheck.setToolTipText("Ignore non-polymorphic markers and adjust likelihoods accordingly");
        allPolymorphicCheck.setEnabled(false);
        allPolymorphicCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPolymorphicCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel6.add(allPolymorphicCheck, gridBagConstraints);
        jPanel6.add(jSeparator1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel6, gridBagConstraints);

        estimatePriorCheck.setText("Estimate prior parameters from data");
        estimatePriorCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                estimatePriorCheckStateChanged(evt);
            }
        });
        // estimatePriorCheck.setSelected(true);
        //setPriorParamsEnabled(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 195;
        getContentPane().add(estimatePriorCheck, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        setVisible(false);
        hasCancelled = false;
    }//GEN-LAST:event_exportButtonActionPerformed

    private void startThetasComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startThetasComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startThetasComboActionPerformed

    private void startTreeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTreeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startTreeComboActionPerformed

    private void speciesTreeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speciesTreeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_speciesTreeComboActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void mcmcLengthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcmcLengthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mcmcLengthFieldActionPerformed

    private void mcmcBurninFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcmcBurninFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mcmcBurninFieldActionPerformed

    private void mcmcSampleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcmcSampleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mcmcSampleFieldActionPerformed

    private void varFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_varFieldActionPerformed

    private void uFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uFieldActionPerformed

    }//GEN-LAST:event_uFieldActionPerformed

    private void meanFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_meanFieldActionPerformed

    private void uFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_uFieldInputMethodTextChanged
        updateMutation();
    }//GEN-LAST:event_uFieldInputMethodTextChanged

    private void vFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_vFieldInputMethodTextChanged
        updateMutation();
    }//GEN-LAST:event_vFieldInputMethodTextChanged

    private void vFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vFieldActionPerformed

    private void uFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_uFieldFocusLost
        updateMutation();
    }//GEN-LAST:event_uFieldFocusLost

    private void vFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vFieldFocusLost
        updateMutation();        // TODO add your handling code here:
    }//GEN-LAST:event_vFieldFocusLost

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        hasCancelled = true;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void allPolymorphicCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPolymorphicCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allPolymorphicCheckActionPerformed

    private void startTreeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startTreeComboItemStateChanged
        treeTextPane.setEnabled(startTreeCombo.getSelectedIndex() == 1);

    }//GEN-LAST:event_startTreeComboItemStateChanged

    private void treePriorParamFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treePriorParamFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_treePriorParamFieldActionPerformed

    private void popTraitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popTraitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_popTraitActionPerformed

    private void timesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesCheckBoxActionPerformed

    }//GEN-LAST:event_timesCheckBoxActionPerformed

    private void treeCheckBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_treeCheckBoxPropertyChange

    }//GEN-LAST:event_treeCheckBoxPropertyChange

    private void treeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_treeCheckBoxItemStateChanged
        if (treeCheckBox.isSelected()) {
            timesCheckBox.setSelected(true);
            populationCheckBox.setSelected(true);

        }
        timesCheckBox.setEnabled(!treeCheckBox.isSelected());
        populationCheckBox.setEnabled(!treeCheckBox.isSelected());
    }//GEN-LAST:event_treeCheckBoxItemStateChanged

    private void populationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populationCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_populationCheckBoxActionPerformed

    private void setPriorParamsEnabled(boolean val) {
        meanField.setEnabled(val);
        meanLabel.setEnabled(val);
        varField.setEnabled(val);
        varLabel.setEnabled(val);
        treePriorParamField.setEnabled(val);
        uField.setEnabled(val);
        uLabel.setEnabled(val);
        vField.setEnabled(val);
        vLabel.setEnabled(val);
        treeParamLabel.setEnabled(val);
        pi0Label.setEnabled(val);
        pi0LabelLabel.setEnabled(val);
        pi1Label.setEnabled(val);
        pi1LabelLabe.setEnabled(val);
        rateLabel.setEnabled(val);
        rateLabelLabel.setEnabled(val);
    }

    /**
     * When the user selects/deselcts the prior state button, the fields
     * for the prior parameters are disabled/enabled resp.
     * @param evt
     */
    private void estimatePriorCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_estimatePriorCheckStateChanged
        setPriorParamsEnabled(!estimatePriorCheck.isSelected());
    }//GEN-LAST:event_estimatePriorCheckStateChanged

    private void treeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_treeCheckBoxActionPerformed

    void setPopTraits(String[] traitNames) {
        popTrait.removeAllItems();
        for (String traitName : traitNames) {
            if (traitName != null && traitName.length() > 0)
                popTrait.addItem(traitName);
        }
    }


    private String sfg(double x) {
        return Double.toString(Basic.roundSigFig(x, 4));
    }


    void updateMutation() {
        double u = Double.parseDouble(uField.getText());
        double v = Double.parseDouble(vField.getText());
        double rate = 2 * u * v / (u + v);
        double pi0 = v / (u + v);
        double pi1 = u / (u + v);
        rateLabel.setText(sfg(rate));
        pi0Label.setText(sfg(pi0));
        pi1Label.setText(sfg(pi1));
    }


    /*void setPriorParams(Document doc) {
        this.doc = doc;
        String traitName = (String)popTrait.getSelectedItem();
        params = Snap.estimatePriorParams(this.doc,traitName,this.hamming);
        uField.setText(sfg(params.u));
        vField.setText(sfg(params.v));
        updateMutation();
        meanField.setText(sfg(params.gammaMean));
        varField.setText(sfg(params.gammaVar));
        treePriorParamField.setText(sfg(params.lambda));
    }   */


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SnapExportDialog dialog = new SnapExportDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /* Variables declaration - do not modify
    private javax.swing.JCheckBox allPolymorphicCheck;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox estimatePriorCheck;
    private javax.swing.JButton exportButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField mcmcBurninField;
    private javax.swing.JTextField mcmcLengthField;
    private javax.swing.JTextField mcmcSampleField;
    private javax.swing.JTextField meanField;
    private javax.swing.JLabel meanLabel;
    private javax.swing.JCheckBox mutationCheckBox;
    private javax.swing.JLabel pi0Label;
    private javax.swing.JLabel pi0LabelLabel;
    private javax.swing.JLabel pi1Label;
    private javax.swing.JLabel pi1LabelLabe;
    private javax.swing.JComboBox popTrait;
    private javax.swing.JCheckBox populationCheckBox;
    private javax.swing.JLabel rateLabel;
    private javax.swing.JLabel rateLabelLabel;
    private javax.swing.JComboBox speciesTreeCombo;
    private javax.swing.JComboBox startThetasCombo;
    private javax.swing.JComboBox startTreeCombo;
    private javax.swing.JCheckBox timesCheckBox;
    private javax.swing.JCheckBox treeCheckBox;
    private javax.swing.JLabel treeParamLabel;
    private javax.swing.JTextField treePriorParamField;
    private javax.swing.JTextPane treeTextPane;
    private javax.swing.JTextField uField;
    private javax.swing.JLabel uLabel;
    private javax.swing.JTextField vField;
    private javax.swing.JLabel vLabel;
    private javax.swing.JTextField varField;
    private javax.swing.JLabel varLabel;
    // End of variables declaration//GEN-END:variables        */

    public javax.swing.JCheckBox allPolymorphicCheck;
    public javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JButton cancelButton;
    public javax.swing.JCheckBox estimatePriorCheck;
    public javax.swing.JButton exportButton;
    //  public javax.swing.JCheckBox jCheckBox1;
    public javax.swing.JComboBox jComboBox2;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel9;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    public javax.swing.JPanel jPanel7;
    public javax.swing.JPanel jPanel8;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JSeparator jSeparator1;
    public javax.swing.JTextField mcmcBurninField;
    public javax.swing.JTextField mcmcLengthField;
    public javax.swing.JTextField mcmcSampleField;
    public javax.swing.JTextField meanField;
    public javax.swing.JLabel meanLabel;
    public javax.swing.JCheckBox mutationCheckBox;
    public javax.swing.JLabel pi0Label;
    public javax.swing.JLabel pi0LabelLabel;
    public javax.swing.JLabel pi1Label;
    public javax.swing.JLabel pi1LabelLabe;
    public javax.swing.JComboBox popTrait;
    public javax.swing.JCheckBox populationCheckBox;
    public javax.swing.JLabel rateLabel;
    public javax.swing.JLabel rateLabelLabel;
    public javax.swing.JComboBox speciesTreeCombo;
    public javax.swing.JComboBox startThetasCombo;
    public javax.swing.JComboBox startTreeCombo;
    public javax.swing.JCheckBox timesCheckBox;
    public javax.swing.JCheckBox treeCheckBox;
    public javax.swing.JLabel treeParamLabel;
    public javax.swing.JTextField treePriorParamField;
    public javax.swing.JTextPane treeTextPane;
    public javax.swing.JTextField uField;
    public javax.swing.JLabel uLabel;
    public javax.swing.JTextField vField;
    public javax.swing.JLabel vLabel;
    public javax.swing.JTextField varField;
    public javax.swing.JLabel varLabel;

    public Document doc = null;     //We need these three to compute parameters for the prior
    public Distances hamming = null;

    public boolean hasCancelled;
}
